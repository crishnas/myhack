Complete System Flow: Step-by-Step
Phase 1: File Ingestion (Inbound from Mainframe to AWS)
Step	Component	Action
1	Mainframe (C3)	Initiates the process by sending an RFI file.
2	Managed File Transfer (MFTS)	Securely transports the file from the on-premises mainframe to AWS over a private connection.
3	AWS S3 Bucket	The file lands in a designated S3 bucket. This is the secure landing zone.
4	S3 Event Notification	The creation of the new file object triggers an event notification.
5	AWS Lambda (File Ingestion)	The S3 event automatically invokes the Lambda function.
6	AWS Lambda	The function executes its code:
- Reads the RFI file from S3.
- Parses and validates the file's content.
- Transforms the data into a structured format.
7	Amazon Aurora PostgreSQL	The Lambda function connects to the database and inserts the parsed data as new records. Each record is initially marked with a status like PENDING.
Phase 2: API Orchestration (ECS Fargate Workflow)
Step	Component	Action
8	ECS Fargate Task	A long-running orchestration task polls the Aurora database for records with a PENDING status.
9	ECS Fargate Task	For each PENDING record, it begins a sequential, multi-step process:
Phase 3: Partner API Integration (Via API Gateway)
Step	Component	Action
10	ECS Fargate Task	Prepares the call for the first partner API. It retrieves a pre-provisioned Access Token (e.g., from AWS Secrets Manager) for authentication.
11	Amazon API Gateway	The Fargate task calls the API Gateway endpoint, passing the request payload and the access token in the header.
12	Lambda Authorizer	Before proxying the request, API Gateway calls the configured Lambda Authorizer and passes it the token.
13	Lambda Authorizer	The function validates the token (e.g., checks its signature, expiration, and scope). It returns an IAM policy granting Allow or Deny for the request.
14	Amazon API Gateway	If Allow, API Gateway routes the request to the appropriate backend endpoint—the Partner's Validation API.
➡️ The following steps are repeated for each of the three APIs in sequence:

Call API: API Gateway sends the request to the partner API.

Process: The partner API performs its logic (Validation, List Assignments, Verification).

Return Response: The partner API returns a success or failure response back through API Gateway to the ECS Fargate task.

Step	API	Success Path	Failure Path
15-17	Step 1: Validation API	If successful, the task proceeds to Step 2.	If failed, the task updates the DB (Status=FAILED, Error=VALIDATION_ERROR). Processing for this record stops.
18-20	Step 2: List Assignments API	If successful, the task proceeds to Step 3.	If failed, the task updates the DB (Status=FAILED, Error=ASSIGNMENTS_ERROR). Processing for this record stops.
21-23	Step 3: BAEC Coupon Verification API	If successful, the task updates the DB (Status=SUCCESS).	If failed, the task updates the DB (Status=FAILED, Error=VERIFICATION_ERROR).
Phase 4: Retry Mechanism for Resilience
Step	Component	Action
24	ECS Fargate Task	The same or a separate "retry" process continuously polls the Aurora database for records with a FAILED status.
25	ECS Fargate Task	For each failed record, it reads the error code to determine which specific API step failed.
26	Retry Loop	It then retries the call only to that specific API (e.g., just the Verification API) by jumping back to Step 11. This loop continues until the record succeeds or a maximum retry limit is hit.
Summary of Key AWS Services & Their Purpose:
Amazon S3: Secure, durable landing zone for incoming files.

AWS Lambda (Serverless Compute): Event-driven, short-running tasks for ingestion and authorization. No servers to manage.

Amazon Aurora PostgreSQL (Database): The "source of truth." Tracks all record data, process state, errors, and timestamps for full auditability.

Amazon ECS Fargate (Serverless Containers): Long-running orchestration workflow. Manages the complex state of processing each record through multiple steps. Ideal for tasks that need more runtime than Lambda.

Amazon API Gateway: Secure entry point for all partner APIs. Handles authentication, routing, and monitoring, decoupling your internal code from the partner's API details.

AWS Secrets Manager: (Implied) Securely stores and rotates the access tokens needed to authenticate with the partner APIs.
